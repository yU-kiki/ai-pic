{"ast":null,"code":"/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeys.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation;\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined,\n    // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location\n    }, result);\n  }\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText\n        });\n      } // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n\n      throw error;\n    } // Pick off the right state value to return\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n    return value;\n  }\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n    return {\n      location,\n      matches\n    };\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n}\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n  // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(match => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","warning","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","values","routeData","find","method","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","onReject","handler","contentType","text","deferred","toUpperCase","body","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isRevalidatingLoader","unwrap","getAll","handle","origin","UNSAFE_convertRoutesToDataRoutes"],"sources":["/Users/yukiikeda/B_2208/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText\n        });\n      } // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n\n\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}